---
alwaysApply: false
---
## 3. Test Data Management

- **Types and factories.** Define data models in `/models/` and create dynamic data with `faker`.  
- **Constants.** Keep business constants in `/constants/`.  
- **Static data.** Store pre‑created entities under `/test-data/{env}/`.  

---

## 4. Reporting and Readability

- **Step decorator.** Use `@reportStep` to convert method names into readable report steps.  
- **Step grouping.** Bundle related steps with helpers in `step.helper.ts`.  
- **Artifacts.** Capture screenshots, logs, and traces with utilities such as `annotations.helper.ts`.  

---

## 5. API Usage

- **Seed via API.** Create or clean up data through REST helpers to keep UI tests lean.  
- **Type‑safe responses.** Validate payloads with Zod schemas in `/schemas/` when responses drive assertions.  

---

## 6. User Sessions

- **Session helpers.** Create isolated sessions with `createConsumerSession` or `createEnterpriseSession`; reuse sessions with `saveAuthByUser` and `useAuthByUser`.  

```ts
await step.session(propertyManager, 'Start PM session', async () => {
  const pmSession = await createEnterpriseSession();
  await loginPage(pmSession).visit();
  await loginPage(pmSession).logIn(propertyManager);
  await releaseSession(pmSession, { saveAuthByUser: propertyManager });
});
```

---

## 7. Locators

- **Built‑in locators.** Prefer Playwright’s semantic locators (`getByRole`, `getByLabel`, `getByText`).  
- **Stable attributes.** When necessary, rely on `data-testid` rather than XPath or fragile CSS.  

---

## 8. Assertions

- **Auto‑retry.** Use Playwright’s retrying `expect` on `Locator`s within Page Objects.  
- **Soft vs. hard.** Default to `expect.soft()`; reserve hard assertions for critical failures.  
- **Custom messages.** Supply explicit messages when defaults are unclear (`toBeTruthy`, `toBeFalsy`).  
- **Message reuse.** Centralise shared messages in `assert-messages.const.ts`.  

---

## 9. TypeScript Guidelines

- **Avoid `enum`.** Prefer `ValueOf<typeof ENUM>` or `ElementOf`.  

```ts
const APPLICANT_STATUSES = {
  NOT_STARTED: 'Not started',
  IN_PROGRESS: 'In progress',
  COMPLETED: 'Completed',
} as const;

type ApplicantStatus = ValueOf<typeof APPLICANT_STATUSES>;
```

---

## 10. Code Quality and Safety

- **Code checks.** Run and fix all linting, formatting, and type‑check tasks before committing.  
- **RegEx safety.** Test every regular expression for ReDoS; mark safe patterns with a comment `Safe against ReDoS:`.  

---

## 11. Writing a Test (Recipe)

```ts
// tags: e2e XRAY-123
import { test, expect } from '@playwright/test';
import { LoginPage } from '../pages/login.page';

test('Consumer can sign in', async ({ page }) => {
  const login = new LoginPage(page);
  await login.visit();
  await login.logIn('alice@example.com', 'secret');
  await expect(page).toHaveURL(/dashboard/);
});
```

**Checklist**

1. Use Page Objects only (avoid raw selectors).  
2. Include a single clear assertion.  
3. Avoid arbitrary waits; rely on auto‑retry `expect`.  

